c
points.to_sql
points
c
n
c
e
n
exit
e
n
c
db
c
db
self.class.db
self.class
self
Database
c
e.message
e
c
RGeo::GeoJSON.decode(foo)
foo = request.body.read
foo = request.body.rewind
foo = request.body.rewind.read
params
RGeo::GeoJSON.decode(geo_param.to_json)
geo_param.to_json
foo
foo = RGeo::GeoJSON.decode('{"type":"Point","coordinates":[1,2]}')
geo_param
RGeo::GeoJSON.decode('{"type":"Point","coordinates":[1,2]}')
geo_param
RGeo::GeoJSON.decode(geo_param)
c
JSON.parse(request.env["rack.input"].read)
request.body.rewind
request.body.read
request.body.rewind
request.body
request.env["rack.input"].input
request.env["rack.input"]
request.env["rack.input"].read
request.env["rack.input"].read.class
JSON.parse(request.env["rack.input"].read)
request.env["rack.input"].read
request.env["rack.input"].gets
request.env["rack.input"]
request.env
request
c
request.params.values
request.params.keys
request.params.class
request.params
request
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
request
params
c
request.input
request
params
exit
request
params
exit
logger
app
c
foo[:items].all
foo[:items]
foo.connect
foo.new
foo = Sequel.connect(adapter: 'postgres', host: 'localhost', database: ENV['DATABASE_NAME'], user: ENV['DATABASE_USER'], password: ENV['DATABASE_PASSWORD'])
Sequel.connect(adapter: 'postgres', host: 'localhost', database: ENV['DATABASE_NAME'], user: ENV['DATABASE_USER'], password: ENV['DATABASE_PASSWORD'])
ENV['DATABASE_PASSWORD']
ENV['DATABASE_USER']
ENV['DATABASE_NAME']
Sequel.connect(adapter: 'postgres',
c
ENV[:DATABASE_NAME]
ENV.keys
ENV
