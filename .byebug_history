exit
c
n
SUPPORTED_UNIT.include?(params['radius']['unit'])
 params['radius']['unit']
c
n
c
n
c
n
points_json
n
!!nil
params['radius']['unit']
c
exit
c
env[HTTP_METHOD_OVERRIDE_HEADER]
HTTP_METHOD_OVERRIDE_HEADER
n
s
n
env
c
env
method
env
n
env
c
params
c
request.request_method
c
env
n
env
method
n
c
env[rack.methodoverride.original_method]
env[RACK_METHODOVERRIDE_ORIGINAL_METHOD]
env
c
env
c
env
c
env
request.request_method
exit
request.headers
request.header
request.request_method
c
request.GET.to_json
request.GET.keys
request.GET.class
request.GET
c
exit
c
Rack::Utils.parse_query(foo)
foo = Rack::Utils.build_query(params)
params[:geometry]
params['geometry']
params.class
Rack::Utils.build_query(params)
params.to_query
params
c
params
request.body.post
request.body.pos
request.body.posts
request.body.gets
request.body.gets.rewind
request.body.gets
env['rack.input']
request.params.values
request.params.class
request.params
request.GET
request.POST
request.GET.keys
request.GET.class
request.GET
c
request.GET
GET
request.
request.POST
request
c
JSON.parse request.params.to_json
request.params.to_json
request.params.class
request.params
JSON.parse request.params
c
request.body.read
request.body.rewind
params
c
exit
c
attribute.flatten
attribute
c
attribute
c
attribute
c
point
c
points
point
exit
c
points
point
c
db[:points].all
db[:points]
c
points.to_sql
points
c
n
c
e
n
exit
e
n
c
db
c
db
self.class.db
self.class
self
Database
c
e.message
e
c
RGeo::GeoJSON.decode(foo)
foo = request.body.read
foo = request.body.rewind
foo = request.body.rewind.read
params
RGeo::GeoJSON.decode(geo_param.to_json)
geo_param.to_json
foo
foo = RGeo::GeoJSON.decode('{"type":"Point","coordinates":[1,2]}')
geo_param
RGeo::GeoJSON.decode('{"type":"Point","coordinates":[1,2]}')
geo_param
RGeo::GeoJSON.decode(geo_param)
c
JSON.parse(request.env["rack.input"].read)
request.body.rewind
request.body.read
request.body.rewind
request.body
request.env["rack.input"].input
request.env["rack.input"]
request.env["rack.input"].read
request.env["rack.input"].read.class
JSON.parse(request.env["rack.input"].read)
request.env["rack.input"].read
request.env["rack.input"].gets
request.env["rack.input"]
request.env
request
c
request.params.values
request.params.keys
request.params.class
request.params
request
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
request
params
c
request.input
request
params
exit
request
params
exit
logger
app
c
foo[:items].all
foo[:items]
foo.connect
foo.new
foo = Sequel.connect(adapter: 'postgres', host: 'localhost', database: ENV['DATABASE_NAME'], user: ENV['DATABASE_USER'], password: ENV['DATABASE_PASSWORD'])
Sequel.connect(adapter: 'postgres', host: 'localhost', database: ENV['DATABASE_NAME'], user: ENV['DATABASE_USER'], password: ENV['DATABASE_PASSWORD'])
ENV['DATABASE_PASSWORD']
ENV['DATABASE_USER']
ENV['DATABASE_NAME']
Sequel.connect(adapter: 'postgres',
c
ENV[:DATABASE_NAME]
ENV.keys
ENV
